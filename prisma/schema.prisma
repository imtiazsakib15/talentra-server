generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  COMPANY
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING
}

enum InterestStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      UserRole   @default(CANDIDATE)
  status    UserStatus @default(PENDING)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  candidate Candidate?
  company   Company?

  interestsFrom Interest[] @relation("SentBy")
  interestsTo   Interest[] @relation("ReceivedBy")

  @@map("users")
}

model Candidate {
  id          String    @id @default(uuid())
  userId      String    @unique
  fullName    String
  image       String
  experience  Int
  phone       String
  address     String
  city        String
  country     String
  dateOfBirth DateTime?
  resume      String
  isAvailable Boolean   @default(false)
  isVisible   Boolean   @default(true)

  user User @relation(fields: [userId], references: [id])

  @@map("candidates")
}

model Company {
  id          String @id @default(uuid())
  userId      String @unique
  companyName String
  logo        String
  website     String
  industry    String
  address     String
  country     String
  description String

  user User @relation(fields: [userId], references: [id])

  @@map("companies")
}

model Interest {
  id        String         @id @default(uuid())
  fromId    String
  toId      String
  message   String?
  status    InterestStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  fromUser User @relation("SentBy", fields: [fromId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReceivedBy", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
}
