generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  COMPANY
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING
}

enum InterestStatus {
  ACCEPTED
  DECLINED
  PENDING
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      UserRole   @default(CANDIDATE)
  status    UserStatus @default(PENDING)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  candidate Candidate?
  company   Company?

  @@map("users")
}

model Candidate {
  id          String    @id @default(uuid())
  userId      String    @unique
  fullName    String
  image       String
  experience  Int
  phone       String
  address     String
  city        String
  country     String
  dateOfBirth DateTime?
  resume      String
  isAvailable Boolean   @default(false)
  isVisible   Boolean   @default(true)

  user        User       @relation(fields: [userId], references: [id])
  interestsTo Interest[]

  @@map("candidates")
}

model Company {
  id          String @id @default(uuid())
  userId      String @unique
  companyName String
  logo        String
  website     String
  industry    String
  address     String
  country     String
  description String

  user          User       @relation(fields: [userId], references: [id])
  interestsFrom Interest[]

  @@map("companies")
}

model Interest {
  id          String         @id @default(uuid())
  companyId   String
  candidateId String
  message     String?
  status      InterestStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([companyId, candidateId])
  @@map("interests")
}
